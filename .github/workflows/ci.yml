name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run unit tests
        run: go test ./...

  pg-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: qa
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: Run PG integration tests
        env:
          PG_DSN: postgres://postgres:password@localhost:5432/qa?sslmode=disable
        run: go test -run TestPGIntegration -v ./internal/runner

  mssql-tests:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "Your_password123"
        ports: ['1433:1433']
        options: >-
          --health-cmd "bash -lc 'grep -q \"SQL Server is now ready for client connections\" /var/opt/mssql/log/errorlog'"
          --health-interval 10s --health-timeout 5s --health-retries 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: Run MSSQL integration tests
        env:
          MSSQL_DSN: sqlserver://sa:Your_password123@localhost:1433?database=master
        run: go test -run TestMSSQLIntegration -v ./internal/runner

  examples:
    name: Run example suites (httpbin + PG + MSSQL + auth)
    runs-on: ubuntu-latest
    needs: [test]
    services:
      httpbin:
        image: kennethreitz/httpbin
        ports: ['8080:80']
        options: >-
          --health-cmd "curl -fsS http://localhost:8080/ip || exit 1"
          --health-interval 10s --health-timeout 5s --health-retries 10
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: qa
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "Your_password123"
        ports: ['1433:1433']
        options: >-
          --health-cmd "bash -lc 'grep -q \"SQL Server is now ready for client connections\" /var/opt/mssql/log/errorlog'"
          --health-interval 10s --health-timeout 5s --health-retries 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Wait for services (httpbin)
        run: |
          for i in {1..30}; do curl -fsS http://localhost:8080/ip >/dev/null && break || sleep 2; done
      - name: Wait for MSSQL (port 1433)
        shell: bash
        run: |
          for i in {1..60}; do (echo > /dev/tcp/127.0.0.1/1433) >/dev/null 2>&1 && break || sleep 2; done
      - name: Build and run examples
        env:
          HTTPBIN_BASE_URL: http://localhost:8080
          ENABLE_DEMO_AUTH: "1"
          PG_DSN: postgres://postgres:password@localhost:5432/qa?sslmode=disable
          MSSQL_DSN: sqlserver://sa:Your_password123@localhost:1433?database=master
        run: |
          ./scripts/run-examples.sh
      - name: Upload example reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: example-reports
          path: reports/
