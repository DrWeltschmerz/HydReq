name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: 🔍 Validate suites against schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: 📦 Build validator
        run: go build -o bin/validate ./cmd/validate
      - name: ✅ Run validator
        run: ./bin/validate -dir testdata -schema schemas/suite.schema.json -quiet

  lint:
    name: 🧹 Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: 🎨 Check gofmt
        run: |
          fmt_out=$(gofmt -l . | grep -v '^$' || true)
          if [ -n "$fmt_out" ]; then
            echo "❌ The following files are not gofmt'ed:" >&2
            echo "$fmt_out" >&2
            exit 1
          fi
          echo "✅ Formatting check passed"
      - name: 🔍 Run go vet
        run: go vet ./...
      - name: 📋 Check go mod tidy
        run: |
          cp go.mod go.mod.ci.bak
          cp go.sum go.sum.ci.bak
          go mod tidy
          if ! diff -q go.mod go.mod.ci.bak >/dev/null || ! diff -q go.sum go.sum.ci.bak >/dev/null; then
            echo '❌ go.mod/go.sum changed after go mod tidy. Run it locally and commit.' >&2
            diff -u go.mod.ci.bak go.mod || true
            diff -u go.sum.ci.bak go.sum || true
            exit 1
          fi
          echo "✅ go.mod is tidy"
      
  test:
    name: 🧪 Run unit tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: 🏃 Run unit tests (race)
        run: go test -race ./...

  fe-tests:
    name: 🧪 Web UI unit tests (JS)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run JS tests (jsdom/mocha)
        run: npm run test:js

  pg-tests:
    name: 🐘 Run PostgreSQL integration tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: qa
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: 🏃 Run PG integration tests
        env:
          PG_DSN: postgres://postgres:password@localhost:5432/qa?sslmode=disable
        run: go test -run TestPGIntegration -v ./internal/runner

  mssql-tests:
    name: 🗄️ Run MSSQL integration tests
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "Your_password123"
        ports: ['1433:1433']
        options: >-
          --health-cmd "bash -lc 'grep -q \"SQL Server is now ready for client connections\" /var/opt/mssql/log/errorlog'"
          --health-interval 10s --health-timeout 5s --health-retries 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: 🏃 Run MSSQL integration tests
        env:
          MSSQL_DSN: sqlserver://sa:Your_password123@localhost:1433?database=master
        run: go test -run TestMSSQLIntegration -v ./internal/runner

  examples:
    name: 📊 Run example suites (httpbin + PG + MSSQL + auth)
    runs-on: ubuntu-latest
    needs: [test]
    services:
      httpbin:
        image: kennethreitz/httpbin
        ports: ['8080:80']
        options: >-
          --health-cmd "sh -lc 'python3 -c \"import urllib.request; urllib.request.urlopen(\\\"http://127.0.0.1:80/ip\\\"); print(\\\"ok\\\")\" || python -c \"import urllib.request; urllib.request.urlopen(\\\"http://127.0.0.1:80/ip\\\"); print(\\\"ok\\\")\"'"
          --health-interval 10s --health-timeout 5s --health-retries 30 --health-start-period 20s
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: qa
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "Your_password123"
        ports: ['1433:1433']
        options: >-
          --health-cmd "bash -lc 'grep -q \"SQL Server is now ready for client connections\" /var/opt/mssql/log/errorlog'"
          --health-interval 10s --health-timeout 5s --health-retries 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
      - name: 💾 Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: ⏳ Wait for services (httpbin)
        run: |
          for i in {1..60}; do curl -fsS http://localhost:8080/ip >/dev/null && break || sleep 2; done
      - name: 📦 Build validator and validate suites
        run: |
          go build -o bin/validate ./cmd/validate
          ./bin/validate -dir testdata -schema schemas/suite.schema.json -quiet
      - name: ⏳ Wait for MSSQL (port 1433)
        shell: bash
        run: |
          for i in {1..60}; do (echo > /dev/tcp/127.0.0.1/1433) >/dev/null 2>&1 && break || sleep 2; done
      - name: 🚀 Build and run examples
        env:
          HTTPBIN_BASE_URL: http://localhost:8080
          ENABLE_DEMO_AUTH: "1"
          PG_DSN: postgres://postgres:password@localhost:5432/qa?sslmode=disable
          MSSQL_DSN: sqlserver://sa:Your_password123@localhost:1433?database=master
        run: |
          ./scripts/run-examples.sh
      - name: 📤 Upload example reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: example-reports
          path: reports/

  e2e:
    name: 🌐 Playwright E2E (docker compose)
    runs-on: ubuntu-latest
    needs: [examples]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Compose
        run: |
          docker version
          docker compose version
      - name: Build and run hydreq + httpbin + playwright
        run: |
          docker compose -f docker-compose.playwright.ci.yml up --build --abort-on-container-exit --exit-code-from playwright
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test/e2e/playwright-report/

  pr-summary:
    name: PR summary from reports
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [examples]
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Download example reports
        uses: actions/download-artifact@v4
        with:
          name: example-reports
          path: example-reports
      - name: Generate PR summary
        id: gen
        shell: bash
        run: |
          set -euo pipefail
          # Always pick the batch run report (run-*.json) if present, else fallback to first .json
          report=$(ls -1 example-reports/run-*.json 2>/dev/null | head -n1)
          if [[ -z "$report" ]]; then
            report=$(ls -1 example-reports/*.json | head -n1)
          fi
          echo "report=$report" >> $GITHUB_OUTPUT
          scripts/pr-summary.sh "$report" > pr-summary.md
          echo "\n\n---\n\n" >> pr-summary.md
          # Assertion suggestions are disabled in CI until feature is finalized
          # Step summary
          cat pr-summary.md >> $GITHUB_STEP_SUMMARY
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pr-summary.md', 'utf8');
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
