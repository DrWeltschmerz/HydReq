{
  "HydReq: Basic GET": {
    "scope": "yaml,yml",
    "prefix": "hydreq-get",
    "body": [
      "- name: ${1:GET example}",
      "  request:",
      "    method: GET",
      "    url: ${2:/status/200}",
      "  assert:",
      "    status: ${3:200}"
    ],
    "description": "HydReq test: basic GET with status assertion"
  },
  "HydReq: POST echo and extract": {
    "scope": "yaml,yml",
    "prefix": "hydreq-post-extract",
    "body": [
      "- name: ${1:POST echo}",
      "  request:",
      "    method: POST",
      "    url: ${2:/anything}",
      "    body:",
      "      id: ${3:42}",
      "      user: ${4:qa}",
      "  assert:",
      "    status: 200",
      "    jsonEquals:",
      "      json.id: \"${3:42}\"",
      "      json.user: ${4:qa}",
      "  extract:",
      "    echoedUser:",
      "      jsonPath: json.user"
    ],
    "description": "HydReq test: POST with body, jsonEquals, and extraction"
  },
  "HydReq: Matrix": {
    "scope": "yaml,yml",
    "prefix": "hydreq-matrix",
    "body": [
      "- name: ${1:matrix demo}",
      "  request:",
      "    method: GET",
      "    url: /anything",
      "    query:",
      "      color: \"${color}\"",
      "      size: \"${size}\"",
      "  assert:",
      "    status: 200",
      "    jsonEquals:",
      "      args.color: \"${color}\"",
      "      args.size: \"${size}\"",
      "  matrix:",
      "    color: [red, blue]",
      "    size: [S, M]"
    ],
    "description": "HydReq test: data-driven matrix expansion"
  },
  "HydReq: Hook (HTTP)": {
    "scope": "yaml,yml",
    "prefix": "hydreq-hook-http",
    "body": [
      "pre:",
      "  - name: ${1:init}",
      "    request:",
      "      method: GET",
      "      url: ${2:/status/200}",
      "    assert:",
      "      status: 200"
    ],
    "description": "HydReq hook: pre HTTP request with assertion"
  },
  "HydReq: SQL hook (sqlite)": {
    "scope": "yaml,yml",
    "prefix": "hydreq-hook-sqlite",
    "body": [
      "pre:",
      "  - name: ${1:insert row}",
      "    sql:",
      "      driver: sqlite",
      "      dsn: file:./qa.sqlite?cache=shared",
      "      query: |",
      "        INSERT INTO notes(id, content, created) VALUES ('${FAKE:uuid}', 'hello ${RANDINT:1:9}', '${NOW:2006-01-02T15:04:05Z07:00}');"
    ],
    "description": "HydReq hook: sqlite insert with generators"
  }
  ,
  "HydReq: Retries": {
    "scope": "yaml,yml",
    "prefix": "hydreq-retry",
    "body": [
      "retry:",
      "  max: ${1:5}",
      "  backoffMs: ${2:200}",
      "  jitterPct: ${3:30}"
    ],
    "description": "HydReq retry policy block"
  },
  "HydReq: dependsOn": {
    "scope": "yaml,yml",
    "prefix": "hydreq-depends",
    "body": [
      "dependsOn:",
      "  - ${1:previous test name}"
    ],
    "description": "HydReq dependsOn block"
  },
  "HydReq: OpenAPI enable": {
    "scope": "yaml,yml",
    "prefix": "hydreq-openapi-enable",
    "body": [
      "openApi:",
      "  enabled: ${1:true}"
    ],
    "description": "Per-test OpenAPI enable/disable"
  },
  "HydReq: Suite auth": {
    "scope": "yaml,yml",
    "prefix": "hydreq-auth",
    "body": [
      "auth:",
      "  bearerEnv: ${1:DEMO_BEARER}",
      "  basicEnv: ${2:BASIC_B64}"
    ],
    "description": "Suite auth environment bindings"
  },
  "HydReq: Negative test": {
    "scope": "yaml,yml",
    "prefix": "hydreq-negative",
    "body": [
      "- name: ${1:invalid payload returns 400}",
      "  request:",
      "    method: POST",
      "    url: ${2:/anything}",
      "    body:",
      "      id: not-a-number",
      "  assert:",
      "    status: 400",
      "    jsonContains:",
      "      error: invalid"
    ],
    "description": "HydReq negative test example"
  },
  "HydReq: Stage": {
    "scope": "yaml,yml",
    "prefix": "hydreq-stage",
    "body": [
      "stage: ${1:1}"
    ],
    "description": "HydReq execution stage"
  },
  "HydReq: Pre/Post hooks": {
    "scope": "yaml,yml",
    "prefix": "hydreq-prepost",
    "body": [
      "pre:",
      "  - name: ${1:setup}",
      "    request:",
      "      method: GET",
      "      url: /status/200",
      "    assert:",
      "      status: 200",
      "post:",
      "  - name: ${2:teardown}",
      "    request:",
      "      method: GET",
      "      url: /status/200",
      "    assert:",
      "      status: 200"
    ],
    "description": "HydReq pre/post HTTP hooks"
  },
  "HydReq: Suite skeleton": {
    "scope": "yaml,yml",
    "prefix": "hydreq-suite",
    "body": [
      "name: ${1:my suite}",
      "baseUrl: ${2:${ENV:HTTPBIN_BASE_URL}}",
      "vars:",
      "  HTTPBIN_BASE_URL: https://httpbin.org",
      "auth:",
      "  bearerEnv: DEMO_BEARER",
      "openApi:",
      "  file: ${3:testdata/specs/openapi.yaml}",
      "  enabled: ${4:false}",
      "tests:",
      "  - name: ${5:GET example}",
      "    request:",
      "      method: GET",
      "      url: /status/200",
      "    assert:",
      "      status: 200"
    ],
    "description": "HydReq suite skeleton with auth and OpenAPI"
  },
  "HydReq: Tags": {
    "scope": "yaml,yml",
    "prefix": "hydreq-tags",
    "body": [
      "tags: [${1:smoke}, ${2:slow}]"
    ],
    "description": "HydReq test tags for filtering"
  },
  "HydReq: Assert jsonContains": {
    "scope": "yaml,yml",
    "prefix": "hydreq-assert-jsoncontains",
    "body": [
      "assert:",
      "  status: ${1:200}",
      "  jsonContains:",
      "    ${2:key}: ${3:value}"
    ],
    "description": "HydReq assertion with jsonContains"
  }
}
