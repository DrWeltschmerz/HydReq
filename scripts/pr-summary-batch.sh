#!/usr/bin/env bash
set -euo pipefail

# Aggregate multiple HydReq JSON suite reports into a single Markdown summary.
# Usage:
#   scripts/pr-summary-batch.sh <reports_dir>
#
# It will look for *.json under <reports_dir> and print totals and per-suite statuses.

if [[ $# -lt 1 ]]; then
  echo "Usage: $0 <reports_dir>" >&2
  exit 2
fi

REPORTS_DIR="$1"
shopt -s nullglob
files=("$REPORTS_DIR"/*.json)
shopt -u nullglob
if (( ${#files[@]} == 0 )); then
  echo "No JSON reports found in $REPORTS_DIR" >&2
  exit 1
fi

# Merge totals across per-suite detailed reports (or summary jsons)
# We detect shape based on keys. Prefer .summary when present, else infer from .tests.

jq -s -r '
  def suite_name: .suite // input_filename | sub("^.*/"; "") | sub("\\.json$"; "");
  def status_icon(s): if s=="passed" then "✅" elif s=="failed" then "❌" else "–" end;

  # compute per-file summary object {suite, total, passed, failed, skipped, duration}
  map(
    . as $r |
    {
      suite: ($r.suite // null),
      summary: (
        if ($r.summary? != null) then $r.summary
        elif ($r.tests? != null) then {
          total: ($r.tests|length),
          passed: ($r.tests|map(select(.status=="passed"))|length),
          failed: ($r.tests|map(select(.status=="failed"))|length),
          skipped: ($r.tests|map(select(.status=="skipped"))|length),
          duration: ($r.tests|map(.durationMs // 0)|add)
        }
        else null end
      ),
      tests: ($r.tests // [])
    }
  ) as $arr |

  # print header
  "### HydReq batch summary" ,
  "",
  ("- Suites: \( $arr|length )"),
  (
    $arr
    | map(.summary)
    | add // {total:0,passed:0,failed:0,skipped:0,duration:0}
    | "- Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped) | Duration(ms): \(.duration)"
  ),
  "",
  "#### Suites",
  (
    $arr[] | "- \(.suite // "(unknown)"): total=\(.summary.total) passed=\(.summary.passed) failed=\(.summary.failed) skipped=\(.summary.skipped)"
  ),
  "",
  "#### Failed tests",
  (
    $arr[] | select(.tests|map(.status=="failed")|any) |
    . as $s |
    ($s.tests[] | select(.status=="failed") | "- ❌ [\($s.suite // "(unknown)")] \(.name) (stage=\(.stage), durationMs=\(.durationMs // 0))")
  ),
  "",
  "> Generated by scripts/pr-summary-batch.sh"
'
"${files[@]}"
