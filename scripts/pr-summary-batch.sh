#!/usr/bin/env bash
set -euo pipefail

# Summarize a HydReq batch run report (run-<timestamp>.json) into Markdown.
# Usage:
#   scripts/pr-summary-batch.sh <run-batch.json>

if [[ $# -lt 1 ]]; then
  echo "Usage: $0 <run-batch.json>" >&2
  exit 2
fi

BATCH_JSON="$1"
if [[ ! -f "$BATCH_JSON" ]]; then
  echo "Batch report not found: $BATCH_JSON" >&2
  exit 2
fi

jq -r '
  def status_icon(s): if s=="passed" then "✅" elif s=="failed" then "❌" else "–" end;
  . as $run |
  "### HydReq batch summary: \($run.runAt // "(unknown)")",
  "",
  ("- Suites: \($run.suites|length)"),
  ("- Total: \($run.summary.total) | Passed: \($run.summary.passed) | Failed: \($run.summary.failed) | Skipped: \($run.summary.skipped) | Duration(ms): \($run.summary.duration)"),
  "",
  "#### Suites",
  (.suites[] | "- \(.suite // "(unknown)"): total=\(.summary.total) passed=\(.summary.passed) failed=\(.summary.failed) skipped=\(.summary.skipped)"),
  "",
  "#### Failed tests",
  (.suites[] | select(.tests|map(.status=="failed")|any) |
    . as $s |
    ($s.tests[] | select(.status=="failed") | "- ❌ [\($s.suite // "(unknown)")] \(.name) (stage=\(.stage), durationMs=\(.durationMs // 0))")
  ),
  "",
  "> Generated by scripts/pr-summary-batch.sh"
' "$BATCH_JSON"
