package report

import (
    "html/template"
    "os"
    "time"
)

// WriteHTMLDetailed renders a standalone HTML report with inline CSS
// showing the suite summary and per-test results.
func WriteHTMLDetailed(path string, rep DetailedReport) error {
    const tpl = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{.Suite}} — HydReq Report</title>
  <style>
    :root{ --ok:#2e7d32; --fail:#c62828; --skip:#6a6a6a; --bg:#0b0d11; --card:#12151b; --muted:#aab2bf; --text:#e6edf3; --accent:#4f8cff; }
    body{ margin:0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji"; background: var(--bg); color: var(--text); }
    header{ padding:20px; border-bottom:1px solid #1f2430; position:sticky; top:0; background:rgba(11,13,17,0.9); backdrop-filter:saturate(180%) blur(8px); }
    h1{ margin:0; font-size:20px; }
    .muted{ color: var(--muted); }
    .grid{ display:grid; grid-template-columns: repeat(auto-fit, minmax(200px,1fr)); gap:12px; margin-top:12px; }
    .card{ background: var(--card); border:1px solid #1f2430; border-radius:8px; padding:12px; }
    .k{ font-size:12px; color: var(--muted); }
    .v{ font-size:20px; font-weight:600; }
    .v.ok{ color: var(--ok); }
    .v.fail{ color: var(--fail); }
    .v.skip{ color: var(--skip); }
    main{ padding:20px; }
    table{ width:100%; border-collapse: collapse; margin-top:16px; }
    th, td{ padding:10px 8px; border-bottom:1px solid #1f2430; vertical-align: top; }
    th{ text-align:left; font-size:12px; color: var(--muted); letter-spacing: .02em; }
    .status{ font-weight:600; text-transform: uppercase; font-size:11px; padding:2px 6px; border-radius:999px; display:inline-block; }
    .passed{ color: var(--ok); background: rgba(46,125,50,.12); }
    .failed{ color: var(--fail); background: rgba(198,40,40,.12); }
    .skipped{ color: var(--skip); background: rgba(106,106,106,.18); }
    .tag{ font-size:11px; color: var(--muted); border:1px solid #313949; padding:2px 6px; border-radius:6px; margin-right:6px; }
    .mono{ font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; font-size:12px; }
    .msgs{ color: var(--muted); white-space: pre-wrap; }
    footer{ padding:16px 20px; border-top:1px solid #1f2430; color: var(--muted); font-size:12px; }
  </style>
  <script>
    // Small helper to toggle failed-only view
    function toggleFailed(el){
      const on = el.dataset.on === '1';
      el.dataset.on = on ? '0' : '1';
      document.querySelectorAll('tbody tr').forEach(tr => {
        const st = tr.getAttribute('data-status');
        tr.style.display = (!on && st !== 'failed') ? 'none' : '';
      });
      el.textContent = el.dataset.on==='1' ? 'Show all' : 'Only failed';
    }
  </script>
  </head>
<body>
  <header>
    <h1>{{.Suite}} <span class="muted">— HydReq Report</span></h1>
    <div class="grid">
      <div class="card"><div class="k">Total</div><div class="v">{{.Summary.Total}}</div></div>
      <div class="card"><div class="k">Passed</div><div class="v ok">{{.Summary.Passed}}</div></div>
      <div class="card"><div class="k">Failed</div><div class="v fail">{{.Summary.Failed}}</div></div>
      <div class="card"><div class="k">Skipped</div><div class="v skip">{{.Summary.Skipped}}</div></div>
      <div class="card"><div class="k">Duration</div><div class="v">{{printf "%.3fs" .Summary.Duration.Seconds}}</div></div>
      <div class="card"><button onclick="toggleFailed(this)" data-on="0" style="background:var(--accent);color:white;border:none;border-radius:6px;padding:8px 12px;cursor:pointer">Only failed</button></div>
    </div>
  </header>
  <main>
    <table>
      <thead>
        <tr>
          <th style="width:50%">Test</th>
          <th>Stage</th>
          <th>Tags</th>
          <th>Status</th>
          <th>Duration</th>
          <th>Messages</th>
        </tr>
      </thead>
      <tbody>
        {{range .TestCases}}
        <tr data-status="{{.Status}}">
          <td class="mono">{{.Name}}</td>
          <td>{{.Stage}}</td>
          <td>{{range .Tags}}<span class="tag">{{.}}</span>{{end}}</td>
          <td><span class="status {{.Status}}">{{.Status}}</span></td>
          <td>{{printf "%.3fs" (durationSeconds .DurationMs)}}</td>
          <td class="msgs">{{range .Messages}}• {{.}}&#10;{{end}}</td>
        </tr>
        {{end}}
      </tbody>
    </table>
  </main>
  <footer>
    Generated by HydReq • {{ nowRFC3339 }}
  </footer>
</body>
</html>`

    funcMap := template.FuncMap{
        "durationSeconds": func(ms int64) float64 { return float64(ms) / 1000.0 },
        "nowRFC3339": func() string { return time.Now().Format(time.RFC3339) },
    }
    t := template.Must(template.New("report").Funcs(funcMap).Parse(tpl))
    f, err := os.Create(path)
    if err != nil {
        return err
    }
    defer f.Close()
    return t.Execute(f, rep)
}
