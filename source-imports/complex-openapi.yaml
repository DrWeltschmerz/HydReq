openapi: 3.0.3
info:
  title: Complex API
  description: A comprehensive API with all OpenAPI features
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://dev.api.example.com/v1
    description: Development server
    variables:
      version:
        default: v1
        description: API version
security:
  - apiKey: []
  - bearerAuth: []
paths:
  /users:
    get:
      summary: Get users
      description: Retrieve a list of users
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sort
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      security:
        - apiKey: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create user
      description: Create a new user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a single user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - name: include
          in: query
          description: Include related data
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [posts, comments]
      security:
        - apiKey: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /search:
    get:
      summary: Search
      description: Search for content
      operationId: search
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
            minLength: 1
        - name: type
          in: query
          description: Content type
          required: false
          schema:
            type: string
            enum: [users, posts, comments]
            default: posts
        - name: X-API-Key
          in: header
          description: API Key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                  total:
                    type: integer
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        profile:
          $ref: '#/components/schemas/Profile'
    UserInput:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
        profile:
          $ref: '#/components/schemas/Profile'
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
        profile:
          $ref: '#/components/schemas/Profile'
    Profile:
      type: object
      properties:
        bio:
          type: string
          maxLength: 500
        avatar:
          type: string
          format: uri
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        code:
          type: integer
        details:
          type: object
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT